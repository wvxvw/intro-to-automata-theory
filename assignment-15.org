# -*- fill-column: 80; org-confirm-babel-evaluate: nil -*-

#+TITLE:     Assignment 15, Authomata Theory
#+AUTHOR:    Oleg Sivokon
#+EMAIL:     olegsivokon@gmail.com
#+DATE:      <2016-01-01 Fri>
#+DESCRIPTION: Fifth assignment in the course 20440 Automata and Formal Languages
#+KEYWORDS: Automata Theory, Formal Languages, Assignment
#+LANGUAGE: en
#+LaTeX_CLASS: article
#+LATEX_HEADER: \usepackage{commath}
#+LATEX_HEADER: \usepackage{pgf}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{shapes,backgrounds}
#+LATEX_HEADER: \usepackage{marginnote}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{enumerate}
#+LATEX_HEADER: \usepackage{algpseudocode}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \usetikzlibrary{arrows,automata}
#+LATEX_HEADER: \setlength{\parskip}{16pt plus 2pt minus 2pt}
#+LATEX_HEADER: \renewcommand{\arraystretch}{1.6}
#+LATEX_HEADER: \DeclareMathOperator{\Neg}{Neg}

#+BEGIN_SRC emacs-lisp :exports none
  (setq org-latex-pdf-process
        '("latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode' -pdf -f %f")
        org-latex-listings t
        org-src-fontify-natively t
        org-latex-custom-lang-environments '((maxima "maxima"))
        org-listings-escape-inside '("(*@" . "@*)")
        org-babel-latex-htlatex "htlatex")

  (defmacro by-backend (&rest body)
    `(cl-case (when (boundp 'backend)
                (org-export-backend-name backend))
       ,@body))
#+END_SRC

#+RESULTS:
: by-backend

#+BEGIN_LATEX
\definecolor{codebg}{rgb}{0.96,0.99,0.8}
\definecolor{codestr}{rgb}{0.46,0.09,0.2}
\lstset{%
  backgroundcolor=\color{codebg},
  basicstyle=\ttfamily\scriptsize,
  breakatwhitespace=false,
  breaklines=false,
  captionpos=b,
  framexleftmargin=10pt,
  xleftmargin=10pt,
  framerule=0pt,
  frame=tb,
  keepspaces=true,
  keywordstyle=\color{blue},
  showspaces=false,
  showstringspaces=false,
  showtabs=false,
  stringstyle=\color{codestr},
  tabsize=2
}
\lstnewenvironment{maxima}{%
  \lstset{%
    backgroundcolor=\color{codebg},
    escapeinside={(*@}{@*)},
    aboveskip=20pt,
    captionpos=b,
    label=,
    caption=,
    showstringspaces=false,
    frame=single,
    framerule=0pt,
    basicstyle=\ttfamily\scriptsize,
    columns=fixed}}{}
}
\makeatletter
\newcommand{\verbatimfont}[1]{\renewcommand{\verbatim@font}{\ttfamily#1}}
\makeatother
\verbatimfont{\small}%
\clearpage
#+END_LATEX

* Problems

** Problem 1
   1. Show right-linear grammar equivalent to the automaton given below:

      #+HEADER: :exports results
      #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
      #+BEGIN_SRC latex
        \begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=2.8cm,
                            semithick]
      
          \node[accepting,initial,state]   (A)              {$q_0$};
          \node[state]                     (B) [right of=A] {$q_1$};
          \node[accepting,state]           (C) [right of=B] {$q_2$};
      
          \path (A) edge [loop above] node {$b$} (A)
                    edge              node {$a$} (B)
                (B) edge [loop above] node {$b$} (B)
                    edge              node {$a$} (C)
                    edge              node {$b$} (A);
        \end{tikzpicture}
      #+END_SRC

   2. Build a finite automaton for the language given by the grammar rules:
      #+HEADER: :exports results
      #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
      #+BEGIN_SRC latex
        \begin{align*}
          &S \to bS \;|\; aR \\
          &R \to bS \;|\; aaR \;|\; aa \;|\; b \;.
        \end{align*}
      #+END_SRC

*** Answer 1
    First, I will extract the $\delta$ function from the given automaton.
    Then, I'll use the cases of this function to generate the grammar:

    | $\delta$ | a         | b             | $\epsilon$ |
    | /        | <         |               |            |
    |----------+-----------+---------------+------------|
    | $q_0$    | $\{q_1\}$ | $\{q_0\}$     | $\{q_0\}$  |
    | $q_1$    | $\{q_2\}$ | $\{q_1,q_0\}$ | -          |
    | $q_2$    | -         | -             | $\{q_2\}$  |
    
    Rename the variables: $q_0=S$, $q_1=X$ and $q_2=Y$, then the resulting
    grammar is given by:
    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        &S \to aX \;|\; bS \;|\; \epsilon \\
        &X \to aY \;|\; bX \;|\; bS \\
        &Y \to \epsilon \;.
      \end{align*}
    #+END_SRC
      
    All rules in this grammar are either of the form $V \to t$ or $v \to tW$,
    where $V$ and $W$ are variables and $t$ is a terminal.

*** Answer 2
    First, I will modify the grammar to make it easier to construct the $\delta$
    for the desired automaton by introducing new rules: $X \to aR$, $Y \to a$
    and $Z \to b$.  Now we can rewrite the grammar:

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        &S \to bS \;|\; aR \\
        &R \to bS \;|\; aX \;|\; aY \;|\; Z \\
        &X \to aR \\
        &Y \to a \\
        &Z \to b \;.
      \end{align*}
    #+END_SRC

    Renaming the variables: $S=q_0$, $R=q_1$, $X=q_2$, $Y=q_3$ and $Z=q_4$ gives
    the following $\delta$ function:

    | $\delta$ | a              | b             |
    | /        | <              |               |
    |----------+----------------+---------------|
    | $q_0$    | $\{q_1\}$      | $\{q_0\}$     |
    | $q_1$    | $\{q_2, q_3\}$ | $\{q_0,q_4\}$ |
    | $q_2$    | $\{q_1\}$      | -             |
    | $*q_3$   | -              | -             |
    | $*q_4$   | -              | -             |

    Having $\delta$ we can build the automaton:

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=2.8cm,
                          semithick]

        \node[initial,state]   (A)              {$q_0$};
        \node[state]           (B) [right of=A] {$q_1$};
        \node[state]           (C) [right of=B] {$q_2$};
        \node[accepting,state] (D) [below of=A] {$q_3$};
        \node[accepting,state] (E) [below of=C] {$q_4$};

        \path (A) edge [loop above] node {$b$} (A)
                  edge              node {$a$} (B)
              (B) edge              node {$a$} (C)
                  edge              node {$a$} (D)
                  edge              node {$b$} (E)
              (C) edge              node {$a$} (B);
      \end{tikzpicture}
    #+END_SRC

** Problem 2
  Given a language $L=\{w \in \{a,b\}^*\;|\;\#_a(w)=\#_b(w)\}$, show
  context-free grammar $G$ which accepts it.

*** Answer 3
    $L$ contains an empty string, thus $G$ must have the $S \to \epsilon$ rule.
    Also, for any $a$ is must add a $b$ somewhere in the word.  There are only
    two possible ways to do that: either $a$ is before $b$ or the other way
    around.  Thus, we need to add two more rules: $S \to aSbS$ and $S \to bSaS$.
    Using structural induction on the length of the word generated by $S$ we can
    also show that for any word in $L$ there is a derivation in $G$.  Hence $G$
    is given by:

    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        &S \to aSbS \;|\; bSaS \;|\; \epsilon \;.
      \end{align*}
    #+END_SRC

** Problem 3
   Show a context-free grammar $G$ accepting the language $L$ defined as:
   #+HEADER: :exports results
   #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
   #+BEGIN_SRC latex
     \begin{align*}
       L = \{dw_1dw_2d \dots w_nd &\;|\; n \geq 4 \\
                                  &\land \forall k: w_k \in \{a,b,c\}^* \\
                                  &\land \exists k: (2 \geq k \geq n-2 \land \#_c(w_{k+2}) = \abs{w_k})\}
     \end{align*}
   #+END_SRC

*** Answer 4
    The words in $L$ will have to start with at least two repetitions of $dw$,
    followed by the part with a simplified requirement: there will be no
    restrictin on the value of $k$.  Since context-free grammars are closed
    under concatenation, I will construct the grammar in steps.

    1. $G_1$ is the grammar for two repetitions of $dw$:
       #+HEADER: :exports results
       #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
       #+BEGIN_SRC latex
         \begin{align*}
           &S \to dX \\
           &W \to aW \;|\; bW \;|\; cW \;|\; \epsilon \\
           &X \to WdY \\
           &Y \to WdW \;.
         \end{align*}
       #+END_SRC

    2. $G_2$ is the grammar that counts the number of letters in the $k^{th}$ word
       and ensures that $k+2^{th}$ word has as many $c$ letters.
       #+HEADER: :exports results
       #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
       #+BEGIN_SRC latex
         \begin{align*}
           &S \to dCT \\
           &W \to aW \;|\; bW \;|\; cW \;|\; \epsilon \\
           &C \to aCc \;|\; bCc \;|\; cCc \;|\; dWd \\
           &T \to TWd \;|\; d \;.
         \end{align*}
       #+END_SRC
       
       $C$ variable is used to count the number of letters in the $k^{th}$ word.
       $T$ variable is used to add zero or more repetitions of $dw$ after the
       $k+2^{th}$ word was found.  Followed by the final $d$.  $W$ is variable
       for generating arbitrary long wrods $w_i$.


    Now, we can combine both grammars:
    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        &S \to dX \\
        &W \to aW \;|\; bW \;|\; cW \;|\; \epsilon \\
        &X \to WdY \\
        &Y \to WdWZ \\
        &Z \to dCT \\
        &C \to aCc \;|\; bCc \;|\; cCc \;|\; dWd \\
        &T \to TWd \;|\; d \;.
      \end{align*}
    #+END_SRC

** Problem 4
   Given the grammar $G$:
   #+HEADER: :exports results
   #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
   #+BEGIN_SRC latex
     \begin{align*}
       &S \to ABC \;|\; bB \;|\; D\\
       &A \to a \;|\; \epsilon \\
       &B \to bB \;|\;\epsilon \\
       &C \to c \\
       &D \to Da \;|\; aDc \;|\; Dc \;|\; ac \;|\; a \;|\; c \;.
     \end{align*}
   #+END_SRC
   
   1. Is $G$ unambiguous?
   2. Give an alternative description to $L(G)$.

*** Answer 5
    $G$ is ambigous, it is possible to derive $ac$ via:
    1. $S \to ABC$, $A \to a$, $B \to \epsilon$ and $C \to c$.
    2. $S \to D$, $D \to ac$.

*** Answer 6
    $L(G)$ is actually regular.  If you look at all derivations from $S$
    separately, then $ABC$ is equivalent to $(a+\epsilon)b^*c$, $bB$ is
    equivalent to $b^+$.  And $D$ is equivalent to $(a+c)^+$.  The later can be
    proved by induction on the word length generated by $D$.

    *Base step:* The word of length 1 can be generated by $D$, sinc it produces
    both $a$ and $c$ terminals.
    
    *Inductive step:* Suppose we can derive the word $(a+c)^+$ of length $n-1$
    using $D$ rule, then the word of length $n$ would be generated by either
    the $D \to Da$ or $D \to Dc$ rule.

    Hence, by induction, $D$ generates the language $(a+c)^+$.

    Now $L(G)=(a+\epsilon)b^*c+b^++(a+c)^+$, since regular languages are closed
    under union.

** Problem 5
   Give a context-free grammar accepting the language
   #+HEADER: :exports results
   #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
   #+BEGIN_SRC latex
     \begin{align*}
       L = \{ x\textbf{+}yz \;| &\; \abs{x} = \abs{y} \\
                              | &\; x, y \in {0, 1}^* \\
                              | &\; \abs{x} \mod 2 = 0 \iff z = \textbf{e} \\
                              | &\; \abs{x} \mod 2 = 1 \iff z = \textbf{o} \}
     \end{align*}
   #+END_SRC

*** Answer 7
    The grammar $G$ accepting $L$ can be given as follows:
    #+HEADER: :exports results
    #+HEADER: :results (by-backend (pdf "latex") (t "raw"))
    #+BEGIN_SRC latex
      \begin{align*}
        &S \to Oo \;|\; Ee \\
        &X \to 00 \;|\; 01 \;|\; 10 \;|\; 11 \\
        &E \to XEX \;|\; X+X \\
        &O \to XOX \;|\; 0+0 \;|\; 0+1 \;|\; 1+0 \;|\; 1+1 \;.
      \end{align*}
    #+END_SRC
    
    $O$ variable is responsible for generating odd $x$ and $y$ while $E$ is
    responsible for generating even sums.  $X$ generates all possible pairs of
    zeros and ones.  It is easy to get convinced that $E$ will generate all and
    only even sums (since concatenating $X$ arbitrary number of times will
    produce only words of even length).  Similarly, $E$ will generate all and
    only odd sums.

    Only odd sums can terminate in $o$ and only even sums can terminate in $e$.

    #+HEADER: :system swipl :exports both :results raw
    #+HEADER: :goal assignment_15.
    #+BEGIN_SRC prolog
      even_binary --> "00" ; "11" ; "01" ; "10" ;
                     "00" , even_binary ;
                     "10" , even_binary ;
                     "01" , even_binary ;
                     "11" , even_binary.

      odd_binary --> "0" ; "1" ; "1", even_binary ; "0", even_binary.

      odd_sums --> odd_binary , "+" , odd_binary.

      even_sums --> even_binary , "+" , even_binary.

      sums --> odd_sums, "o" ; even_sums, "e" .

      print_helper(E) :-
          string_codes(X, E),
          (phrase(sums, E) ->
               format('\\item ~w \\textit{accepted}\n', [X])
           ;
           format('\\item ~w \\textit{rejected}\n', [X])).

      assignment_15 :-
          format('$$\\begin{itemize}\n', []),
          Candidates = [`101+001o`, `1111+0000e`, `101+001`,
                        `1111+0000`, `abcd`, `1010101`, 
                        `0101+1010o`, `001+110e`],
          maplist(print_helper, Candidates),
          format('\\end{itemize}$$', []).
    #+END_SRC
